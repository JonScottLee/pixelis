@import './css-variables.css';

@tailwind base;
@tailwind components;
@tailwind utilities;

@layer utilities {
  .clip-up {
    clip-path: polygon(
      0% 0%,
      100% 0%,
      100% calc(100% - 8vw),
      0% 100%
    );
  }

  .clip-left {
    clip-path: polygon(
      5vw -.1%,
      100% -.1%,
      100% 100.1%,
      0% 100.1%
    );
  }

  .clip-right {
    clip-path: polygon(
      0% -.1%,
      100% -.1%,
      calc(100% - 5vw) 100.1%,
      0% 101%
    )
  }
}

@layer components {
  /* .
  Unlike what is coded into button.tsx, anything in here can be overriden by the consumer 
  
  button {
    
  } */

  /* This is an example of an escape hatch of sorts.
  A consumer could define their own @layer rules in their app,
  and override the behavior of these classes. For example, they
  could change the active behavior to something other than scale.
  
  .button--active,
  .button:active {
    @apply scale-90;
  } */

  .button--primary {
    @apply bg-primary;
    @apply text-white;

    &.on-color {
      @apply bg-white;
      @apply text-gray-900;
    }
  }

  .button--secondary {
    background: transparent;
    @apply border-2;
    @apply border-primary;
    @apply text-primary;

    &.on-color {
      @apply border-white;
      @apply text-white;
    }
  }


  .button--tertiary {
    @apply text-black;
    @apply hover:bg-primary-200;

    &.on-color {
      @apply text-white;
      @apply hover:bg-white;
      @apply hover:bg-opacity-40;
    }
  }
}